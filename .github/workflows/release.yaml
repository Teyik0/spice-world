name: Release

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  check-release:
    name: Check Release Conditions
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      current_version: ${{ steps.version.outputs.current }}
      next_version: ${{ steps.version.outputs.next }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2

      - name: Get current package.json version
        id: version
        run: |
          CURRENT_VERSION=$(bun --print "require('./package.json').version")
          echo "current=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          # Determine next version based on commits or manual input
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          else
            # Auto-detect release type from commit messages
            if git log --format=%s $(git describe --tags --abbrev=0)..HEAD | grep -q "BREAKING CHANGE\|feat!"; then
              RELEASE_TYPE="major"
            elif git log --format=%s $(git describe --tags --abbrev=0)..HEAD | grep -q "^feat"; then
              RELEASE_TYPE="minor"
            else
              RELEASE_TYPE="patch"
            fi
          fi

          # Calculate next version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          case $RELEASE_TYPE in
            major)
              NEXT_VERSION="$((MAJOR + 1)).0.0"
              ;;
            minor)
              NEXT_VERSION="$MAJOR.$((MINOR + 1)).0"
              ;;
            patch)
              NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
              ;;
            prerelease)
              NEXT_VERSION="$MAJOR.$MINOR.$((PATCH + 1))-beta.1"
              ;;
          esac

          echo "next=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Check if release should be created
        id: check
        run: |
          # Check if there are new commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            NEW_COMMITS=$(git rev-list $LAST_TAG..HEAD --count)
            if [ "$NEW_COMMITS" -gt 0 ] || [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
              echo "should_release=true" >> $GITHUB_OUTPUT
            else
              echo "should_release=false" >> $GITHUB_OUTPUT
            fi
          fi

  pre-release-checks:
    name: Pre-Release Checks
    runs-on: ubuntu-latest
    needs: check-release
    if: needs.check-release.outputs.should_release == 'true'
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Run linting
        run: |
          bunx ultracite check
          bunx biome check .

      - name: Type check all workspaces
        run: |
          # Server
          cd apps/server && bunx prisma generate && bunx tsc --noEmit && cd ../..

          # Dashboard
          if [ -d "apps/dashboard" ]; then
            cd apps/dashboard && bunx tsc --noEmit && cd ../..
          fi

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test
        run: |
          # Setup test database
          cd apps/server
          bunx prisma db push
          bun test
          cd ../..

      - name: Build all applications
        run: |
          # Build server
          cd apps/server
          bunx prisma generate
          bun run build
          cd ../..

          # Build dashboard
          if [ -d "apps/dashboard" ]; then
            cd apps/dashboard && npm run build && cd ../..
          fi

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [check-release, pre-release-checks]
    if: needs.check-release.outputs.should_release == 'true'
    outputs:
      release_id: ${{ steps.create_release.outputs.id }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Update version in package.json files
        run: |
          NEW_VERSION="${{ needs.check-release.outputs.next_version }}"

          # Update root package.json
          bun x json -I -f package.json -e "this.version='$NEW_VERSION'"

          # Update workspace package.json files
          find apps packages -name "package.json" -type f | while read -r file; do
            bun x json -I -f "$file" -e "this.version='$NEW_VERSION'"
          done

      - name: Generate changelog
        id: changelog
        run: |
          NEW_VERSION="${{ needs.check-release.outputs.next_version }}"
          CURRENT_VERSION="${{ needs.check-release.outputs.current_version }}"

          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            COMMITS=$(git log --pretty=format:"- %s (%h)" --no-merges $LAST_TAG..HEAD)
          fi

          # Create changelog content
          CHANGELOG="## ðŸš€ Release v$NEW_VERSION

          ### What's Changed
          $COMMITS

          ### ðŸ“¦ Built with
          - Bun ${{ env.BUN_VERSION }}
          - TypeScript
          - Elysia.js
          - Qwik
          - Prisma

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v$CURRENT_VERSION...v$NEW_VERSION"

          # Save changelog to file for release notes
          echo "$CHANGELOG" > RELEASE_NOTES.md

          # Output for GitHub
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Commit version changes
        run: |
          NEW_VERSION="${{ needs.check-release.outputs.next_version }}"
          git add package.json apps/*/package.json packages/*/package.json
          git commit -m "chore: bump version to v$NEW_VERSION"
          git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"

      - name: Push changes and tags
        run: |
          git push origin main
          git push origin --tags

      - name: Build release artifacts
        run: |
          bun install --frozen-lockfile

          # Build server
          cd apps/server
          bunx prisma generate
          bun run build
          cd ../..

          # Build dashboard
          if [ -d "apps/dashboard" ]; then
            cd apps/dashboard && npm run build && cd ../..
          fi

          # Create release archives
          mkdir -p release-artifacts

          # Server binary
          if [ -f "apps/server/dist/server" ]; then
            cp apps/server/dist/server release-artifacts/spice-world-server
            chmod +x release-artifacts/spice-world-server
          fi

          # Dashboard build
          if [ -d "apps/dashboard/dist" ]; then
            cd apps/dashboard && tar -czf ../../release-artifacts/spice-world-dashboard.tar.gz dist/ && cd ../..
          fi

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.check-release.outputs.next_version }}
          release_name: ðŸš€ Release v${{ needs.check-release.outputs.next_version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(needs.check-release.outputs.next_version, 'beta') }}

      - name: Upload Server Binary
        if: hashFiles('release-artifacts/spice-world-server') != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-artifacts/spice-world-server
          asset_name: spice-world-server-linux-x64
          asset_content_type: application/octet-stream

      - name: Upload Dashboard Archive
        if: hashFiles('release-artifacts/spice-world-dashboard.tar.gz') != ''
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: release-artifacts/spice-world-dashboard.tar.gz
          asset_name: spice-world-dashboard.tar.gz
          asset_content_type: application/gzip

  # Deploy release to production
  deploy-release:
    name: Deploy Release
    runs-on: ubuntu-latest
    needs: [check-release, create-release]
    environment:
      name: production
      url: https://spice-world.app
    steps:
      - name: Deploy to Production
        run: |
          echo "ðŸš€ Deploying release v${{ needs.check-release.outputs.next_version }} to production..."
          # Add your production deployment logic here
          # This could include:
          # - Deploying to cloud providers (AWS, GCP, Azure)
          # - Updating Docker containers
          # - Running database migrations
          # - Updating CDN
          # - Notifying team via Slack/Discord

      - name: Post-deployment verification
        run: |
          echo "âœ… Verifying deployment..."
          # Add health checks and verification steps
          # - API health check
          # - Database connectivity
          # - Frontend accessibility
          # - Performance metrics

  # Notify team about release
  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [check-release, create-release, deploy-release]
    if: always() && needs.create-release.result == 'success'
    steps:
      - name: Notify team
        run: |
          echo "ðŸ“¢ Release v${{ needs.check-release.outputs.next_version }} completed!"
          # Add notification logic:
          # - Slack webhook
          # - Discord webhook
          # - Email notification
          # - Update project documentation
